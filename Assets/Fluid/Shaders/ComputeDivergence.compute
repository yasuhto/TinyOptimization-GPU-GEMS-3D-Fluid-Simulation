
#pragma kernel CSMain
#include "./Assets/Fluid/Shaders/FluidConfig.cginc"

float4 _Size;

RWTexture3D<float4> _Write;
Texture3D<float4> _Velocity;
Texture3D<float4> _Obstacles;

[numthreads(NUM_THREADS_X,NUM_THREADS_Y,NUM_THREADS_Z)]
void CSMain (int3 id : SV_DispatchThreadID)
{
    int3 idL = int3(max(0, id.x - 1), id.y, id.z);
    int3 idR = int3(min(_Size.x - 1, id.x + 1), id.y, id.z);
    int3 idB = int3(id.x, max(0, id.y - 1), id.z);
    int3 idT = int3(id.x, min(_Size.y - 1, id.y + 1), id.z);
    int3 idD = int3(id.x, id.y, max(0, id.z - 1));
    int3 idU = int3(id.x, id.y, min(_Size.z - 1, id.z + 1));

	float4 L = _Velocity[idL];
	float4 R = _Velocity[idR];
	float4 B = _Velocity[idB];
	float4 T = _Velocity[idT];
	float4 D = _Velocity[idD];
	float4 U = _Velocity[idU];
	float4 C = float4(0, 0, 0, 0);
    
    L = lerp(L, C, _Obstacles[idL].x);
    R = lerp(R, C, _Obstacles[idR].x);
    B = lerp(B, C, _Obstacles[idB].x);
    T = lerp(T, C, _Obstacles[idT].x);
    D = lerp(D, C, _Obstacles[idD].x);
    U = lerp(U, C, _Obstacles[idU].x);
    
    float divergence =  0.5 * ( ( R.x - L.x ) + ( T.y - B.y ) + ( U.z - D.z ) );
    _Write[id] = float4(divergence, 0, 0, 0);
}
